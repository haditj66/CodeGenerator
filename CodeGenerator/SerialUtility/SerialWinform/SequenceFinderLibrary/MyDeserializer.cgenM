##Macro1  
##Macro2 
##Macro3  
##Macro4  
##Macro5 
##Macro6
##Macro7
##Macro8
##Macro9
##Macro10
##LoopIncrement1 15
##LoopIncrement2 
##LoopIncrement3 
##LoopIncrement4 
##LoopIncrement5 
##LoopIncrement6 
##LoopIncrement7 
##LoopIncrement8 
##LoopIncrement9 
##LoopIncrement10

##ToFile MyDeserializercgen.cs



 
 using MatFileHandler;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;

namespace HolterMonitorGui
{
     

    public class MyDeSerializerContainer<Ttype1>
    { 

        public List<Ttype1> Values { get; set; }
        public string Name { get; private set; }
        public int Length { get; private set; }

        public MyDeSerializerContainer(string name, int length)
        {
            Name = name;
            Length = length;
            Values = new List<Ttype1>(new Ttype1[length]);
        }


    }



	##LOOP_1## 

	public class MyDeSerializer<#i#> <
	<#if1#> Ttype1 <#ifEND#>
	<#if2#> ,Ttype2 <#ifEND#>
	<#if3#> ,Ttype3 <#ifEND#>
	<#if4#> ,Ttype4 <#ifEND#>
	<#if5#> ,Ttype5 <#ifEND#>
	<#if6#> ,Ttype6 <#ifEND#>
	<#if7#> ,Ttype7 <#ifEND#>
	<#if8#> ,Ttype8 <#ifEND#>
	<#if9#> ,Ttype9 <#ifEND#>
	<#if10#> ,Ttype10 <#ifEND#>
	<#if11#> ,Ttype11 <#ifEND#>
	<#if12#> ,Ttype12 <#ifEND#>
	<#if13#> ,Ttype13 <#ifEND#>
	<#if14#> ,Ttype14 <#ifEND#>
	<#if15#> ,Ttype15 <#ifEND#>
	> : IMyDeSerializer 
	<#if1#> where Ttype1 : struct <#ifEND#> 
	<#if2#> where Ttype2 : struct <#ifEND#> 
	<#if3#> where Ttype3 : struct <#ifEND#> 
	<#if4#> where Ttype4 : struct <#ifEND#> 
	<#if5#> where Ttype5 : struct <#ifEND#> 
	<#if6#> where Ttype6 : struct <#ifEND#> 
	<#if7#> where Ttype7 : struct <#ifEND#> 
	<#if8#> where Ttype8 : struct <#ifEND#> 
	<#if9#> where Ttype9 : struct <#ifEND#> 
	<#if10#> where Ttype10 : struct <#ifEND#> 
	<#if11#> where Ttype11 : struct <#ifEND#> 
	<#if12#> where Ttype12 : struct <#ifEND#> 
	<#if13#> where Ttype13 : struct <#ifEND#> 
	<#if14#> where Ttype14 : struct <#ifEND#> 
	<#if15#> where Ttype15 : struct <#ifEND#> 
	{
	 
	
	    <#if1#>public MyDeSerializerContainer<Ttype1> Variable1 { get; private set; }<#ifEND#>
        <#if2#>public MyDeSerializerContainer<Ttype2> Variable2 { get; private set; }<#ifEND#>
        <#if3#>public MyDeSerializerContainer<Ttype3> Variable3 { get; private set; }<#ifEND#>
        <#if4#>public MyDeSerializerContainer<Ttype4> Variable4 { get; private set; }<#ifEND#>
        <#if5#>public MyDeSerializerContainer<Ttype5> Variable5 { get; private set; }<#ifEND#>
        <#if6#>public MyDeSerializerContainer<Ttype6> Variable6 { get; private set; }<#ifEND#>
        <#if7#>public MyDeSerializerContainer<Ttype7> Variable7 { get; private set; }<#ifEND#>
        <#if8#>public MyDeSerializerContainer<Ttype8> Variable8 { get; private set; }<#ifEND#>
        <#if9#>public MyDeSerializerContainer<Ttype9> Variable9 { get; private set; }<#ifEND#>
        <#if10#>public MyDeSerializerContainer<Ttype10> Variable10 { get; private set; }<#ifEND#>
        <#if11#>public MyDeSerializerContainer<Ttype11> Variable11 { get; private set; }<#ifEND#>
        <#if12#>public MyDeSerializerContainer<Ttype12> Variable12 { get; private set; }<#ifEND#>
        <#if13#>public MyDeSerializerContainer<Ttype13> Variable13 { get; private set; }<#ifEND#>
        <#if14#>public MyDeSerializerContainer<Ttype14> Variable14 { get; private set; }<#ifEND#>
        <#if15#>public MyDeSerializerContainer<Ttype15> Variable15 { get; private set; }<#ifEND#>
	


	    public  IMatFile ConvertMyDeserializeVarsToMatFile()
        {
            var builder = new DataBuilder();


			<#if1#>
			var Var1 = builder.NewArray<Ttype1>(1, this.Variable1.Length);
            Array.Copy(this.Variable1.Values.ToArray(), Var1.Data, this.Variable1.Length);
            var VarMat1 = builder.NewVariable("Var1", Var1);
			<#ifEND#>
			<#if2#>
			var Var2 = builder.NewArray<Ttype2>(1, this.Variable2.Length);
            Array.Copy(this.Variable2.Values.ToArray(), Var2.Data, this.Variable2.Length);
            var VarMat2 = builder.NewVariable("Var2", Var2);
			<#ifEND#>
						<#if3#>
			var Var3 = builder.NewArray<Ttype3>(1, this.Variable3.Length);
            Array.Copy(this.Variable3.Values.ToArray(), Var3.Data, this.Variable3.Length);
            var VarMat3 = builder.NewVariable("Var3", Var3);
			<#ifEND#>
						<#if4#>
			var Var4 = builder.NewArray<Ttype4>(1, this.Variable4.Length);
            Array.Copy(this.Variable4.Values.ToArray(), Var4.Data, this.Variable4.Length);
            var VarMat4 = builder.NewVariable("Var4", Var4);
			<#ifEND#>
						<#if5#>
			var Var5 = builder.NewArray<Ttype5>(1, this.Variable5.Length);
            Array.Copy(this.Variable5.Values.ToArray(), Var5.Data, this.Variable5.Length);
            var VarMat5 = builder.NewVariable("Var5", Var5);
			<#ifEND#>
						<#if6#>
			var Var6 = builder.NewArray<Ttype6>(1, this.Variable6.Length);
            Array.Copy(this.Variable6.Values.ToArray(), Var6.Data, this.Variable6.Length);
            var VarMat6 = builder.NewVariable("Var6", Var6);
			<#ifEND#>
						<#if7#>
			var Var7 = builder.NewArray<Ttype7>(1, this.Variable7.Length);
            Array.Copy(this.Variable7.Values.ToArray(), Var7.Data, this.Variable7.Length);
            var VarMat7 = builder.NewVariable("Var7", Var7);
			<#ifEND#>
						<#if8#>
			var Var8 = builder.NewArray<Ttype8>(1, this.Variable8.Length);
            Array.Copy(this.Variable8.Values.ToArray(), Var8.Data, this.Variable8.Length);
            var VarMat8 = builder.NewVariable("Var8", Var8);
			<#ifEND#>
						<#if9#>
			var Var9 = builder.NewArray<Ttype9>(1, this.Variable9.Length);
            Array.Copy(this.Variable9.Values.ToArray(), Var9.Data, this.Variable9.Length);
            var VarMat9 = builder.NewVariable("Var9", Var9);
			<#ifEND#>
						<#if10#>
			var Var10 = builder.NewArray<Ttype10>(1, this.Variable10.Length);
            Array.Copy(this.Variable10.Values.ToArray(), Var10.Data, this.Variable10.Length);
            var VarMat10 = builder.NewVariable("Var10", Var10);
			<#ifEND#>
						<#if11#>
			var Var11 = builder.NewArray<Ttype11>(1, this.Variable11.Length);
            Array.Copy(this.Variable11.Values.ToArray(), Var11.Data, this.Variable11.Length);
            var VarMat11 = builder.NewVariable("Var11", Var11);
			<#ifEND#>
						<#if12#>
			var Var12 = builder.NewArray<Ttype12>(1, this.Variable12.Length);
            Array.Copy(this.Variable12.Values.ToArray(), Var12.Data, this.Variable12.Length);
            var VarMat12 = builder.NewVariable("Var12", Var12);
			<#ifEND#>
						<#if13#>
			var Var13 = builder.NewArray<Ttype13>(1, this.Variable13.Length);
            Array.Copy(this.Variable13.Values.ToArray(), Var13.Data, this.Variable13.Length);
            var VarMat13 = builder.NewVariable("Var13", Var13);
			<#ifEND#>
						<#if14#>
			var Var14 = builder.NewArray<Ttype14>(1, this.Variable14.Length);
            Array.Copy(this.Variable14.Values.ToArray(), Var14.Data, this.Variable14.Length);
            var VarMat14 = builder.NewVariable("Var14", Var14);
			<#ifEND#>
			<#if15#>
			var Var15 = builder.NewArray<Ttype15>(1, this.Variable15.Length);
            Array.Copy(this.Variable15.Values.ToArray(), Var15.Data, this.Variable15.Length);
            var VarMat15 = builder.NewVariable("Var15", Var15);
			<#ifEND#>



            var actual = builder.NewFile(new[] {
			<#if1#>VarMat1<#ifEND#>
			<#if2#>, VarMat2<#ifEND#>
			<#if3#>, VarMat3<#ifEND#>
			<#if4#>, VarMat4<#ifEND#>
			<#if5#>, VarMat5<#ifEND#>
			<#if6#>, VarMat6<#ifEND#>
			<#if7#>, VarMat7<#ifEND#>
			<#if8#>, VarMat8<#ifEND#>
			<#if9#>, VarMat9<#ifEND#>
			<#if10#>, VarMat10<#ifEND#>
			<#if11#>, VarMat11<#ifEND#>
			<#if12#>, VarMat12<#ifEND#>
			<#if13#>, VarMat13<#ifEND#>
			<#if14#>, VarMat14<#ifEND#>
			<#if15#>, VarMat15<#ifEND#>
			  });


            return actual;

        }






	        private object mybitConverter<T>(byte[] bytesdata)
        {
            Type t = typeof(T);
            if (t == typeof(float))
            {
                return (object) System.BitConverter.ToSingle(bytesdata, 0);
            } 
			/* you shouldnt ever need string
            else if (t == typeof(string))
            {
                return (object)System.BitConverter.ToString(bytesdata, 0);
            }
			*/
            else if (t == typeof(double))
            {
                return (object)System.BitConverter.ToDouble(bytesdata, 0);
            }
            else if (t == typeof(bool))
            {
                return (object)System.BitConverter.ToBoolean(bytesdata, 0);
            } 
            else if (t == typeof(char))
            {
                return (char)bytesdata[0];
            }
            else if (t == typeof(Int16))
            {
                return (object)System.BitConverter.ToInt16(bytesdata, 0);
            }
            else if (t == typeof(Int32))
            {
                return (object)System.BitConverter.ToInt32(bytesdata, 0);
            }
            else if (t == typeof(UInt16))
            {
                return (object)System.BitConverter.ToUInt16(bytesdata, 0);
            }
            else if (t == typeof(UInt32))
            {
                return (object)System.BitConverter.ToUInt32(bytesdata, 0);
            }
             

            throw new FormatException("you picked a data type that bitconverter cant handle. if you meant uint8_t, that will be char");
            return null;
        }




		 private byte[] MybitConverterSerialize<T>(object bytesdata)
        {
            Type t = typeof(T);
            if (t == typeof(float))
            {
                return System.BitConverter.GetBytes((float)bytesdata);
            }
            /* you shouldnt ever need string
            else if (t == typeof(string))
            {
                return (object)System.BitConverter.ToString(bytesdata, 0);
            }
			*/
            else if (t == typeof(double))
            {
                return  System.BitConverter.GetBytes((double)bytesdata);
            }
            else if (t == typeof(bool))
            {
                return System.BitConverter.GetBytes((bool)bytesdata);
            }
            else if (t == typeof(char))
            {
                byte[] o =  new byte[1];
                o[0] = (byte)(char)bytesdata;
                return o;//System.BitConverter.GetBytes((char)bytesdata); ;
            }
            else if (t == typeof(Int16))
            {
                return System.BitConverter.GetBytes((Int16)bytesdata);
            }
            else if (t == typeof(Int32))
            {
                return System.BitConverter.GetBytes((Int32)bytesdata);
            }
            else if (t == typeof(UInt16))
            {
                return System.BitConverter.GetBytes((UInt16)bytesdata);
            }
            else if (t == typeof(UInt32))
            {
                return System.BitConverter.GetBytes((UInt32)bytesdata);
            }

            throw new FormatException("you picked a data type that bitconverter cant handle. if you meant uint8_t, that will be char");
            return null;
        }


		public int NumOfVars { get; set; }





		
        public static IMyDeSerializer GetNewDeserializer(
            string namevar1, int lengthvar1
            , string namevar2, int lengthvar2
            , string namevar3, int lengthvar3
            , string namevar4, int lengthvar4
            , string namevar5, int lengthvar5
            , string namevar6, int lengthvar6
            , string namevar7, int lengthvar7
            , string namevar8, int lengthvar8
            , string namevar9, int lengthvar9
            , string namevar10, int lengthvar10
            , string namevar11, int lengthvar11
            , string namevar12, int lengthvar12
            , string namevar13, int lengthvar13
            , string namevar14, int lengthvar14
            , string namevar15, int lengthvar15
            )
        {
            return (IMyDeSerializer)(new MyDeSerializer<#i#>
			<
	<#if1#> Ttype1 <#ifEND#>
	<#if2#> ,Ttype2 <#ifEND#>
	<#if3#> ,Ttype3 <#ifEND#>
	<#if4#> ,Ttype4 <#ifEND#>
	<#if5#> ,Ttype5 <#ifEND#>
	<#if6#> ,Ttype6 <#ifEND#>
	<#if7#> ,Ttype7 <#ifEND#>
	<#if8#> ,Ttype8 <#ifEND#>
	<#if9#> ,Ttype9 <#ifEND#>
	<#if10#> ,Ttype10 <#ifEND#>
	<#if11#> ,Ttype11 <#ifEND#>
	<#if12#> ,Ttype12 <#ifEND#>
	<#if13#> ,Ttype13 <#ifEND#>
	<#if14#> ,Ttype14 <#ifEND#>
	<#if15#> ,Ttype15 <#ifEND#>
	>
			(
                namevar1, lengthvar1
                , namevar2, lengthvar2
                , namevar3, lengthvar3
                , namevar4, lengthvar4
                , namevar5, lengthvar5
                , namevar6, lengthvar6
                , namevar7, lengthvar7
                , namevar8, lengthvar8
                , namevar9, lengthvar9
                , namevar10, lengthvar10
                , namevar11, lengthvar11
                , namevar12, lengthvar12
                , namevar13, lengthvar13
                , namevar14, lengthvar14
                , namevar15, lengthvar15
            )); 
        }


		
        public MyDeSerializer<#i#>(
            string namevar1, int lengthvar1
            , string namevar2, int lengthvar2
            , string namevar3, int lengthvar3
            , string namevar4, int lengthvar4
            , string namevar5, int lengthvar5
            , string namevar6, int lengthvar6
            , string namevar7, int lengthvar7
            , string namevar8, int lengthvar8
            , string namevar9, int lengthvar9
            , string namevar10, int lengthvar10
            , string namevar11, int lengthvar11
            , string namevar12, int lengthvar12
            , string namevar13, int lengthvar13
            , string namevar14, int lengthvar14
            , string namevar15, int lengthvar15
        )
        {
		NumOfVars = <#i#>;

			<#if1#> Variable1 = new MyDeSerializerContainer<Ttype1>(namevar1, lengthvar1); <#ifEND#>
			<#if2#> Variable2 = new MyDeSerializerContainer<Ttype2>(namevar2, lengthvar2);<#ifEND#>
			<#if3#> Variable3 = new MyDeSerializerContainer<Ttype3>(namevar3, lengthvar3);<#ifEND#>
			<#if4#> Variable4 = new MyDeSerializerContainer<Ttype4>(namevar4, lengthvar4);<#ifEND#>
			<#if5#> Variable5 = new MyDeSerializerContainer<Ttype5>(namevar5, lengthvar5);<#ifEND#>
			<#if6#> Variable6 = new MyDeSerializerContainer<Ttype6>(namevar6, lengthvar6);<#ifEND#>
			<#if7#> Variable7 = new MyDeSerializerContainer<Ttype7>(namevar7, lengthvar7);<#ifEND#>
			<#if8#> Variable8 = new MyDeSerializerContainer<Ttype8>(namevar8, lengthvar8);<#ifEND#>
			<#if9#> Variable9 = new MyDeSerializerContainer<Ttype9>(namevar9, lengthvar9);<#ifEND#>
			<#if10#> Variable10 = new MyDeSerializerContainer<Ttype10>(namevar10, lengthvar10);<#ifEND#>
			<#if11#> Variable11 = new MyDeSerializerContainer<Ttype11>(namevar11, lengthvar11);<#ifEND#>
			<#if12#> Variable12 = new MyDeSerializerContainer<Ttype12>(namevar12, lengthvar12);<#ifEND#>
			<#if13#> Variable13 = new MyDeSerializerContainer<Ttype13>(namevar13, lengthvar13);<#ifEND#>
			<#if14#> Variable14 = new MyDeSerializerContainer<Ttype14>(namevar14, lengthvar14);<#ifEND#>
			<#if15#> Variable15 = new MyDeSerializerContainer<Ttype15>(namevar15, lengthvar15);<#ifEND#>
 

        }


		
        public MyDeSerializer<#i#>(
            <#if1#>MyDeSerializerContainer<Ttype1> variable1<#ifEND#>
            <#if2#>,MyDeSerializerContainer<Ttype2> variable2<#ifEND#>
            <#if3#>,MyDeSerializerContainer<Ttype3> variable3<#ifEND#>
            <#if4#>,MyDeSerializerContainer<Ttype4> variable4<#ifEND#>
            <#if5#>,MyDeSerializerContainer<Ttype5> variable5<#ifEND#>
            <#if6#>,MyDeSerializerContainer<Ttype6> variable6<#ifEND#>
            <#if7#>,MyDeSerializerContainer<Ttype7> variable7<#ifEND#>
            <#if8#>,MyDeSerializerContainer<Ttype8> variable8<#ifEND#>
            <#if9#>,MyDeSerializerContainer<Ttype9> variable9<#ifEND#>
            <#if10#>,MyDeSerializerContainer<Ttype10> variable10<#ifEND#>
            <#if11#>,MyDeSerializerContainer<Ttype11> variable11<#ifEND#>
            <#if12#>,MyDeSerializerContainer<Ttype12> variable12<#ifEND#>
            <#if13#>,MyDeSerializerContainer<Ttype13> variable13<#ifEND#>
            <#if14#>,MyDeSerializerContainer<Ttype14> variable14<#ifEND#>
            <#if15#>,MyDeSerializerContainer<Ttype15> variable15<#ifEND#>
			)
        { 
		NumOfVars = <#i#>;

                <#if1#>Variable1 = variable1;<#ifEND#>
                <#if2#>Variable2 = variable2;<#ifEND#>
                <#if3#>Variable3 = variable3;<#ifEND#>
                <#if4#>Variable4 = variable4;<#ifEND#>
                <#if5#>Variable5 = variable5;<#ifEND#>
                <#if6#>Variable6 = variable6;<#ifEND#>
                <#if7#>Variable7 = variable7;<#ifEND#>
                <#if8#>Variable8 = variable8;<#ifEND#>
                <#if9#>Variable9 = variable9;<#ifEND#>
                <#if10#>Variable10 = variable10;<#ifEND#>
                <#if11#>Variable11 = variable11;<#ifEND#>
                <#if12#>Variable12 = variable12;<#ifEND#>
                <#if13#>Variable13 = variable13;<#ifEND#>
                <#if14#>Variable14 = variable14;<#ifEND#>
                <#if15#>Variable15 = variable15;<#ifEND#>
        }





		        public List<byte> Serialize(
		<#if1#>List<Ttype1> data1<#ifEND#>
		<#if2#>,List<Ttype2> data2<#ifEND#>
		<#if3#>,List<Ttype3> data3<#ifEND#>
		<#if4#>,List<Ttype4> data4<#ifEND#>
		<#if5#>,List<Ttype5> data5<#ifEND#>
		<#if6#>,List<Ttype6> data6<#ifEND#>
		<#if7#>,List<Ttype7> data7<#ifEND#>
		<#if8#>,List<Ttype8> data8<#ifEND#>
		<#if9#>,List<Ttype9> data9<#ifEND#>
		<#if10#>,List<Ttype10> data10<#ifEND#>
		<#if11#>,List<Ttype11> data11<#ifEND#>
		<#if12#>,List<Ttype12> data12<#ifEND#>
		<#if13#>,List<Ttype13> data13<#ifEND#>
		<#if14#>,List<Ttype14> data14<#ifEND#>
		<#if15#>,List<Ttype15> data15<#ifEND#>
		)
        {
  
            List<byte> efef = new List<byte>();

			<#if1#>
            for (int i = 0; i < data1.Count; i++)
            {
               efef.AddRange(MybitConverterSerialize<Ttype1>(data1[i]));
            }
			<#ifEND#>

						<#if2#>
            for (int i = 0; i < data2.Count; i++)
            {
               efef.AddRange(MybitConverterSerialize<Ttype2>(data2[i]));
            }
			<#ifEND#>

			<#if3#>
            for (int i = 0; i < data3.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype3>(data3[i]));
            }
			<#ifEND#>

			<#if4#>
            for (int i = 0; i < data4.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype4>(data4[i]));
            }
			<#ifEND#>
						<#if5#>
            for (int i = 0; i < data5.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype5>(data5[i]));
            }
			<#ifEND#>
						<#if6#>
            for (int i = 0; i < data6.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype6>(data6[i]));
            }
			<#ifEND#>
						<#if7#>
            for (int i = 0; i < data7.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype7>(data7[i]));
            }
			<#ifEND#>
						<#if8#>
            for (int i = 0; i < data8.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype8>(data8[i]));
            }
			<#ifEND#>
						<#if9#>
            for (int i = 0; i < data9.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype9>(data9[i]));
            }
			<#ifEND#>
						<#if10#>
            for (int i = 0; i < data10.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype10>(data10[i]));
            }
			<#ifEND#>
						<#if11#>
            for (int i = 0; i < data11.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype11>(data11[i]));
            }
			<#ifEND#>
						<#if12#>
            for (int i = 0; i < data12.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype12>(data12[i]));
            }
			<#ifEND#>
						<#if13#>
            for (int i = 0; i < data13.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype13>(data13[i]));
            }
			<#ifEND#>
						<#if14#>
            for (int i = 0; i < data14.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype14>(data14[i]));
            }
			<#ifEND#>
						<#if15#>
            for (int i = 0; i < data15.Count; i++)
            {
                efef.AddRange(MybitConverterSerialize<Ttype15>(data15[i]));
            }
			<#ifEND#>

            return efef;

        }




		 public bool Deserialize(List<byte> Data)
        {


		    //first do a confirmation that the Data size is bigger then the data
            //needed to serialize all variables
            int sizeNeeded =
			    <#if1#>Marshal.SizeOf<Ttype1>() * Variable1.Length<#ifEND#>
                <#if2#>+ Marshal.SizeOf<Ttype2>() * Variable2.Length<#ifEND#>
                <#if3#>+ Marshal.SizeOf<Ttype3>() * Variable3.Length<#ifEND#>
                <#if4#>+ Marshal.SizeOf<Ttype4>() * Variable4.Length<#ifEND#>
                <#if5#>+ Marshal.SizeOf<Ttype5>() * Variable5.Length<#ifEND#>
                <#if6#>+ Marshal.SizeOf<Ttype6>() * Variable6.Length<#ifEND#>
                <#if7#>+ Marshal.SizeOf<Ttype7>() * Variable7.Length<#ifEND#>
                <#if8#>+ Marshal.SizeOf<Ttype8>() * Variable8.Length<#ifEND#>
                <#if9#>+ Marshal.SizeOf<Ttype9>() * Variable9.Length<#ifEND#>
                <#if10#>+ Marshal.SizeOf<Ttype10>() * Variable10.Length<#ifEND#>
                <#if11#>+ Marshal.SizeOf<Ttype11>() * Variable11.Length<#ifEND#>
                <#if12#>+ Marshal.SizeOf<Ttype12>() * Variable12.Length<#ifEND#>
                <#if13#>+ Marshal.SizeOf<Ttype13>() * Variable13.Length<#ifEND#>
                <#if14#>+ Marshal.SizeOf<Ttype14>() * Variable14.Length<#ifEND#>
                <#if15#>+ Marshal.SizeOf<Ttype15>() * Variable15.Length<#ifEND#> ;
            if (sizeNeeded > Data.Count)
            {
			return false;
                throw new FormatException("Data given is not enough to serialize the variables");
            }




		<#if1#>
            //first get the data of the variable I am deserializing
            byte[] DataOfVar = Data.ToArray();
            int sizeOfDatavar = Marshal.SizeOf<Ttype1>();
            Array.Resize(ref DataOfVar, (Variable1.Length) * sizeOfDatavar);
             

            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            {
                var ttt = DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray(); 
                Variable1.Values[i / sizeOfDatavar] = (Ttype1)mybitConverter<Ttype1>(ttt);//(object)System.BitConverter.ToSingle(ttt, 0);
            }

			Data.RemoveRange(0, DataOfVar.Length);

		 <#ifEND#>

		 <#if2#>
		 

			sizeOfDatavar = Marshal.SizeOf<Ttype2>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable2.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable2.Values[i / sizeOfDatavar] = (Ttype2)mybitConverter<Ttype2>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>

		 <#if3#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype3>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable3.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable3.Values[i / sizeOfDatavar] = (Ttype3)mybitConverter<Ttype3>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if4#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype4>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable4.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable4.Values[i / sizeOfDatavar] = (Ttype4)mybitConverter<Ttype4>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if5#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype5>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable5.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable5.Values[i / sizeOfDatavar] = (Ttype5)mybitConverter<Ttype5>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if6#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype6>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable6.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable6.Values[i / sizeOfDatavar] = (Ttype6)mybitConverter<Ttype6>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if7#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype7>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable7.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable7.Values[i / sizeOfDatavar] = (Ttype7)mybitConverter<Ttype7>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if8#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype8>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable8.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable8.Values[i / sizeOfDatavar] = (Ttype8)mybitConverter<Ttype8>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if9#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype9>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable9.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable9.Values[i / sizeOfDatavar] = (Ttype9)mybitConverter<Ttype9>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if10#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype10>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable10.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable10.Values[i / sizeOfDatavar] = (Ttype10)mybitConverter<Ttype10>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if11#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype11>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable11.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable11.Values[i / sizeOfDatavar] = (Ttype11)mybitConverter<Ttype11>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if12#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype12>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable12.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable12.Values[i / sizeOfDatavar] = (Ttype12)mybitConverter<Ttype12>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if13#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype13>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable13.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable13.Values[i / sizeOfDatavar] = (Ttype13)mybitConverter<Ttype13>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if14#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype14>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable14.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable14.Values[i / sizeOfDatavar] = (Ttype14)mybitConverter<Ttype14>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		
		 <#if15#> 

			sizeOfDatavar = Marshal.SizeOf<Ttype15>();
			DataOfVar = Data.ToArray();
			Array.Resize(ref DataOfVar, (Variable15.Length) * sizeOfDatavar);
            for (int i = 0; i < DataOfVar.Length; i += sizeOfDatavar)
            { 
                Variable15.Values[i / sizeOfDatavar] = (Ttype15)mybitConverter<Ttype3>(DataOfVar.Skip(i).Take(sizeOfDatavar).ToArray());
            } 

			Data.RemoveRange(0, DataOfVar.Length);
		<#ifEND#>
		 

		 return true;
        }


	}




	##END## 

}