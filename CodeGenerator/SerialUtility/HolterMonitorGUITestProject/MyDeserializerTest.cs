using System;
using System.Collections.Generic;
using System.Linq;
using HolterMonitorGui;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace HolterMonitorGUITestProject
{





    [TestClass]
    public class MyDeserializerTest
    {


        public static bool IsAboutEqualTo(double a, double b, double margin)
        {
            return Math.Abs(a - b) < margin;
        }
        public static bool IsAboutEqualTo(float a, float b, float margin)
        {
            return Math.Abs(a - b) < margin;
        }



        [TestMethod]
        public void TestSimple1VariableDeserialize()
        {
            MyDeSerializerContainer<float> var1 = new MyDeSerializerContainer<float>("bla", 2);

            MyDeSerializer1<float> des = new MyDeSerializer1<float>(var1);

            byte[] data = new byte[]
            {
                0x00,0x00, 0x80,   0x3f, //1
                0x99, 0x99, 0x89,0x40, //4.3
            };

            des.Deserialize(data.ToList());

            Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[0], 1, .01));
            Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[1], 4.29999971, .001));
             
        }


        [TestMethod]
        public void TestSimple1VariableDeserializeLotsData()
        {
            byte[] data = new byte[]
            {
                0x00, 0x00, 0x00, 0x40,0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x99, 0x99, 0x89, 0x40 //4.3
            };

            MyDeSerializerContainer<float> var1 = new MyDeSerializerContainer<float>("bla", data.Length/4);

            MyDeSerializer1<float> des = new MyDeSerializer1<float>(var1); 
            bool leftover = des.Deserialize(data.ToList());


            Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[0], 2, .001));
            for (int i = 1; i < des.Variable1.Length-1; i++)
            {
                Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[i], 1, .01));
            } 
            Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[des.Variable1.Length-1], 4.29999971, .001));

        }



        [TestMethod]
        public void variableTest2vars()
        {
            byte[] data = new byte[]
             {
                0x00, 0x00, 0x00, 0x40,0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,0x00, 0x00, 0x80, 0x3f,
                0x99, 0x99, 0x89, 0x40 //4.3
             };


            MyDeSerializerContainer<float> var1 = new MyDeSerializerContainer<float>("bla", data.Length / (4*2));
            MyDeSerializerContainer<float> var2 = new MyDeSerializerContainer<float>("bla2", data.Length / (4 * 2));

            MyDeSerializer2<float,float> des = new MyDeSerializer2<float, float>(var1, var2);
            bool leftover = des.Deserialize(data.ToList());


            Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[0], 2, .001));
            for (int i = 1; i < (des.Variable1.Length/2) - 1; i++)
            {
                Assert.IsTrue(IsAboutEqualTo(des.Variable1.Values[i], 1, .01));
            }
            Assert.IsTrue(IsAboutEqualTo(des.Variable2.Values[(des.Variable2.Length) - 1], 4.29999971, .001));

        }


        [TestMethod]
        public void variableTest5varsDifferentTypes()
        {




            float[] _var1 = new float[] {2, 4.5f, 4,454,676};
            float[] _var2 = new float[] { 4782, 4.5f, 5 };
            UInt32[] _var3 = new UInt32[] { 1, 2, 3 };
            char[] _var4 = new char[] { '5', '2', '3', '3' };
            UInt16[] _var5 = new UInt16[] { 1, 2, 3,4,5 };
             

            MyDeSerializerContainer<float> var1 = new MyDeSerializerContainer<float>("bla", 5);
            MyDeSerializerContainer<float> var2 = new MyDeSerializerContainer<float>("bla2", 3);
            MyDeSerializerContainer<UInt32> var3 = new MyDeSerializerContainer<UInt32>("bla3", 3);
            MyDeSerializerContainer<char>   var4 = new MyDeSerializerContainer<char>("bla4", 4);
            MyDeSerializerContainer<UInt16> var5 = new MyDeSerializerContainer<UInt16>("bla5", 5);

            MyDeSerializer5<float, float, UInt32,char,UInt16> des =
                new MyDeSerializer5<float, float, UInt32, char, UInt16>
                    (var1, var2,var3,var4,var5);

            List<byte> efef = des.Serialize(_var1.ToList(), _var2.ToList(), _var3.ToList(), _var4.ToList(), _var5.ToList());


            bool leftover = des.Deserialize(efef);

            for (int i = 0; i < _var1.Length; i++)
            {
                Assert.IsTrue(_var1[i] == var1.Values[i]);
            }
            for (int i = 0; i < _var2.Length; i++)
            {
                Assert.IsTrue(_var2[i] == var2.Values[i]);
            }
            for (int i = 0; i < _var3.Length; i++)
            {
                Assert.IsTrue(_var3[i] == var3.Values[i]);
            }
            for (int i = 0; i < _var4.Length; i++)
            {
                Assert.IsTrue(_var4[i] == var4.Values[i]);
            }
            for (int i = 0; i < _var5.Length; i++)
            {
                Assert.IsTrue(_var5[i] == var5.Values[i]);
            }



             
        }
    }
}
