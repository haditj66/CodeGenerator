//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################



using CgenMin.MacroProcesses;
using CodeGenerator.MacroProcesses.AESetups;
using System.Collections.Generic;

namespace commonHalAOsProject
{


    public class MotorDriverPWMU : AEUtilityService
    {
        public MotorDriverPWMU(string instanceNameOfTDU, int serviceBuffersize, AEPriorities priority)
            : base("commonHalAOs", instanceNameOfTDU, priority, serviceBuffersize,
                  new CppFunctionArgs(
                        new CppFunctionArg("AEPWM*", "pwmPeripheral"),
                        new CppFunctionArg("AEGPIOOutput*", "gpiotoChangeDirections"),
                        new CppFunctionArg(CppTypeEnum.float_t, "RampAcceleration")
                        ),
                  new ActionRequest("RampUpToThisSpeed", ServiceType.TDU, "bool", "float", "speedToRampUpTo")
                  )
        {
        }
    }

    public class MotorDriverU : AEUtilityService
    {
        public MotorDriverU(string instanceNameOfTDU, int serviceBuffersize, AEPriorities priority)
            : base("commonHalAOs", instanceNameOfTDU, priority, serviceBuffersize,
                  new CppFunctionArgs(
                        new CppFunctionArg("GPIOsNeededForMotor*", "gPIOsNeeded")
                        ),
                  new ActionRequest("MotorDriverTurn", ServiceType.Normal, "AENull", "bool", "TurnOn", "bool", "ClockWise")
                  )
        { }

        protected override List<string> GetHeaderIncludesFromLibrary() { return new List<string>() { "GPIOsNeededForMotor" }; }

    }

    public class I2CDriverU : AEUtilityService
    {
        public I2CDriverU(string instanceNameOfTDU, int serviceBuffersize, AEPriorities priority)
            : base("commonHalAOs", instanceNameOfTDU, priority, serviceBuffersize,
                  new CppFunctionArgs(
                        new CppFunctionArg("AEI2C*", "i2cThisUses", false)
                        ),
                  new ActionRequest("WriteBytes", ServiceType.TDU, "bool", "uint8_t", "devAddr", "uint8_t", "regAddr", "uint8_t", "length", "uint8_t*", "dataToWrite"),
                  new ActionRequest("ReadBytes", ServiceType.TDU, "bool", "uint8_t", "devAddr", "uint8_t", "regAddr", "uint8_t", "length", "uint8_t*", "pdataToWriteTo")
                  )
        { }

        protected override List<string> GetHeaderIncludesFromLibrary() { return new List<string>() { "GPIOsNeededForMotor" }; }

    }


    public class I2CTXCmplt1 : AEEventSignal<I2CTXCmplt1>
    {
        public I2CTXCmplt1() :
            base("I2CTXCmplt1",
            ""
            )
        {    }
    }
    public class I2CTXCmplt2 : AEEventSignal<I2CTXCmplt2>
    {
        public I2CTXCmplt2() :
            base("I2CTXCmplt2",
            ""
            )
        { }
    }
    public class I2CTXCmplt3 : AEEventSignal<I2CTXCmplt3>
    {
        public I2CTXCmplt3() :
            base("I2CTXCmplt3",
            ""
            )
        { }
    }
    public class I2CTXCmplt4 : AEEventSignal<I2CTXCmplt4>
    {
        public I2CTXCmplt4() :
            base("I2CTXCmplt4",
            ""
            )
        { }
    }
    public class I2CTXCmplt5 : AEEventSignal<I2CTXCmplt5>
    {
        public I2CTXCmplt5() :
            base("I2CTXCmplt5",
            ""
            )
        { }
    }

    public class I2CRXCmplt1 : AEEventSignal<I2CRXCmplt1>
    {
        public I2CRXCmplt1() :
            base("I2CRXCmplt1",
            ""
            )
        { }
    }
    public class I2CRXCmplt2 : AEEventSignal<I2CRXCmplt2>
    {
        public I2CRXCmplt2() :
            base("I2CRXCmplt2",
            ""
            )
        { }
    }
    public class I2CRXCmplt3 : AEEventSignal<I2CRXCmplt3>
    {
        public I2CRXCmplt3() :
            base("I2CRXCmplt3",
            ""
            )
        { }
    }
    public class I2CRXCmplt4 : AEEventSignal<I2CRXCmplt4>
    {
        public I2CRXCmplt4() :
            base("I2CRXCmplt4",
            ""
            )
        { }
    }
    public class I2CRXCmplt5 : AEEventSignal<I2CRXCmplt5>
    {
        public I2CRXCmplt5() :
            base("I2CRXCmplt5",
            ""
            )
        { }
    }


    public class commonHalAOs : AEProject
    {


        [AEEXETest]
        public void defaultTest()
        {
            AEClock aEClock = new AEClock("clocl1",1000, "clocl1_cb");

            MotorDriverPWMU motorDriverU = new MotorDriverPWMU("motorDriverpwmU",10, AEPriorities.MediumPriority);
            MotorDriverU motorDriverU1 = new MotorDriverU("motorDriverU", 10, AEPriorities.MediumPriority);

            //I2CDriverU i2CDriverU = new I2CDriverU("i2CDriverU", 10, AEPriorities.MediumPriority);

            aEClock.FlowIntoTDU(motorDriverU,AEClock_PrescalerEnum.PRESCALER1);
        }

        protected override string _GetDirectoryOfLibrary()
        {
            return @"commonHalAOs"; 
        }

        protected override List<AEEvent> _GetEventsInLibrary()
        {
            return new List<AEEvent>() { 
            I2CTXCmplt1.Init(3),
            I2CTXCmplt2.Init(3),            
            I2CRXCmplt1.Init(3),
            I2CRXCmplt2.Init(3)
            };
        }

		protected override List<AEHal> _GetPeripheralsInLibrary()
        {
		//ADCPERIPHERAL1_CH1.Init(Portenum.PortB, PinEnum.PIN0)
            return new List<AEHal>() {
                PWMPERIPHERAL1.Init(Portenum.PortD, PinEnum.PIN13),
                GPIOPERIPHERAL1.Init(Portenum.PortD, PinEnum.PIN10),
                GPIOPERIPHERAL2.Init(Portenum.PortD, PinEnum.PIN9),
                GPIOPERIPHERAL3.Init(Portenum.PortD, PinEnum.PIN8)
            };
        }

        protected override List<AEProject> _GetLibrariesIDependOn()
        {
            return new List<AEProject>() { };
        }
		
		protected override List<string> _GetAnyAdditionalIncludeDirs()
        {
            return new List<string>() { };
        }

        protected override List<string> _GetAnyAdditionalSRCDirs()
        {
            return new List<string>() { };
        }

    }
	
	
	
}