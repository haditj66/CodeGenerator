//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################



using CgenMin.MacroProcesses;
using CodeGenerator.MacroProcesses.AESetups;
using CodeGenerator.MacroProcesses.AESetups.SPBs;
using System.Collections.Generic;

namespace AECoreTestsProject
{


    public class AverageSPB : AESPBBase
    {
        public AverageSPB(string nameOfSPB, StyleOfSPB styleOfSPB, string templateType, bool isSubscribable, SPBChannelUserDefinedCountBuffer ch1)
            : base("AECoreTests", nameOfSPB, styleOfSPB, "", templateType, isSubscribable,  new SizeOfSPBOutput(1, false), ch1)
        {

        }
    }
    public class AdderSPB : AESPBBase
    {
        public AdderSPB(string nameOfSPB, StyleOfSPB styleOfSPB, bool isSubscribable, int numOfChannels, SPBChannelUserDefinedCountBuffer channelAllSame)
            : base("AECoreTests", nameOfSPB, styleOfSPB, "", "", isSubscribable,  new SizeOfSPBOutput(1, false), numOfChannels, channelAllSame)
        {

        } 
    }

    public class ThreeDimensionalVector : AESPBBase
    {
        public ThreeDimensionalVector(string nameOfSPB, StyleOfSPB styleOfSPB, bool isSubscribable )
            : base("AECoreTests", nameOfSPB, styleOfSPB, "", "", isSubscribable,  new SizeOfSPBOutput(4, false),
                  new SPBChannelLockedInCountBuffer(1),
                  new SPBChannelLockedInCountBuffer(1),
                  new SPBChannelLockedInCountBuffer(1))
        {

        }

        protected override CppFunctionArgs SetcppConstructorArgs()
        {
            return new CppFunctionArgs(
                new CppFunctionArg(CppTypeEnum.bool_t, "isForVel")
                );
        }
    }

    public class DerivativeFilter : AEFilter
    {
        public DerivativeFilter()
            : base("AECoreTests", 2)
        {

        }
    }

    //public class AELoopObjectTest22 : AELoopObject
    //{
    //    public AELoopObjectTest22(string instanceName, AEPriorities priority, int freqOfLoop)
    //        : base("AECoreTests", instanceName, priority, freqOfLoop,
    //              new CppFunctionArgs (
    //                  new CppFunctionArg("SomeClassType", "someClassType",false))
    //              )
    //    {

    //    }
    //}

    public class AELoopObjectTest : AELoopObject
    {
        public AELoopObjectTest(string instanceName, AEPriorities priority, int freqOfLoop)
            : base("AECoreTests", instanceName, priority, freqOfLoop, null)
        {

        }
    }

    public class AELoopObjectTest2 : AELoopObject
    {
        public AELoopObjectTest2(string instanceName, AEPriorities priority, int freqOfLoop)
            : base("AECoreTests", instanceName, priority, freqOfLoop, null)
        {

        }
    }

    public class AELoopObjectTest3 : AELoopObject
    {
        public AELoopObjectTest3(string instanceName, AEPriorities priority, int freqOfLoop)
            : base("AECoreTests", instanceName, priority, freqOfLoop, null)
        {

        }
    }

    public class AELoopObjectTest4 : AELoopObject
    {
        public AELoopObjectTest4(string instanceName, AEPriorities priority, int freqOfLoop)
            : base("AECoreTests", instanceName, priority, freqOfLoop, null)
        {

        }
    }
    public class AELoopObjectTest5 : AELoopObject
    {
        public AELoopObjectTest5(string instanceName, AEPriorities priority, int freqOfLoop)
            : base("AECoreTests", instanceName, priority, freqOfLoop, null)
        {

        }
    }

    class UARTDriver : AEUtilityService
    {
        public UARTDriver(string instanceNameOfTDU, AEPriorities priority)
            : base("AECoreTests", instanceNameOfTDU, priority, 10,
                  null,
                  new ActionRequest("Transmit", ServiceType.Normal, "bool", "char const*", "msg")
                  )
        {
        }
         
    }
    class UARTDriverTDU : AEUtilityService
    {
        public UARTDriverTDU(string instanceNameOfTDU, AEPriorities priority)
            : base("AECoreTests", instanceNameOfTDU, priority, 10,
                  null,
                  new ActionRequest("Transmit", ServiceType.Normal, "bool", "char const*", "msg"),
                  new ActionRequest("TransmitTDU", ServiceType.TDU, "bool", "char const*", "msg")
                  )
        {
        }
    }






    public class BlindsUITOPFSM : AEFSM
    {
        public BlindsUITOPFSM(string instanceNameOfMachine, AEPriorities priority)
            : base("AECoreTests", instanceNameOfMachine,

                   new AEState("Idle", 0, null,
                new AEStateEvent(Button1.Instance, "Configuring"),
                new AEStateEvent(Button2.Instance, "NormalOperating"),
                new AEStateEvent(Button3.Instance))

                  , priority, null)
        {
        }

        public override List<AEState> _GetAllStates()
        {
            return new List<AEState>() {
            new AEState("Configuring", 100, "ConfiguringFSM",
                new AEStateEvent(Button1.Instance),
                new AEStateEvent(Button2.Instance),
                new AEStateEvent(Button3.Instance, "Idle")
                ),
            new AEState("NormalOperating", 100, "NormalOperationFSM",
                new AEStateEvent(Button1.Instance),
                new AEStateEvent(Button2.Instance),
                new AEStateEvent(Button3.Instance, "Idle")
                )
            };
        }
    }


    public class ConfiguringFSM : AEFSM
    {
        public ConfiguringFSM(string instanceNameOfMachine, AEPriorities priority)
            : base("AECoreTests", instanceNameOfMachine,

                  new AEState("Idle", 100, null,
                        new AEStateEvent(Button1.Instance),
                        new AEStateEvent(Button2.Instance),
                        new AEStateEvent(Button3.Instance, "SettingTopLimit"))

                  , priority, null)
        {
        }

        public override List<AEState> _GetAllStates()
        {
            return new List<AEState>() {
            new AEState("SettingTopLimit", 100, null,
                new AEStateEvent(Button1.Instance),
                new AEStateEvent(Button2.Instance),
                new AEStateEvent(Button3.Instance, "SettingBottomLimit")
                ),
            new AEState("SettingBottomLimit", 100, null,
                new AEStateEvent(Button1.Instance),
                new AEStateEvent(Button2.Instance),
                new AEStateEvent(Button3.Instance, true)
                )
            };
        }
    }

    public class NormalOperationFSM : AEFSM
    {
        public NormalOperationFSM(string instanceNameOfMachine, AEPriorities priority)
            : base("AECoreTests", instanceNameOfMachine,

                  new AEState("Idle", 0, null,
                        new AEStateEvent(Button1.Instance),
                        new AEStateEvent(Button2.Instance),
                        new AEStateEvent(Button3.Instance, "MovingToPoint"))

                  , priority, null)
        {
        }

        public override List<AEState> _GetAllStates()
        {
            return new List<AEState>() {
            new AEState("MovingToPoint", 0, null,
                new AEStateEvent(Button1.Instance),
                new AEStateEvent(Button2.Instance),
                new AEStateEvent(Button3.Instance, "Idle")
                )
            };
        }
    }





    public class AECoreTests : AEProject
    {
		[AEEXETest]
        public void testSPB()
        {
            AEClock aEClock = new AEClock("clock1", 1000 );

            AESensor aESensor1 = new AESensor("sensor1", SensorResolution.Resolution12Bit, SensorDataType.uint16_T);
            AESensor aESensor2 = new AESensor("sensor2", SensorResolution.Resolution12Bit, SensorDataType.uint16_T);
            AESensor aESensor3 = new AESensor("sensor3", SensorResolution.Resolution12Bit, SensorDataType.uint16_T);

            AverageSPB averageSPB1 = new AverageSPB("averageSPB1", StyleOfSPB.EachSPBTask, "", false, new SPBChannelUserDefinedCountBuffer(10));
            AverageSPB averageSPB2 = new AverageSPB("averageSPB2", StyleOfSPB.EachSPBTask, "", false, new SPBChannelUserDefinedCountBuffer(10));
            AverageSPB averageSPB3 = new AverageSPB("averageSPB3", StyleOfSPB.EachSPBTask, "", false, new SPBChannelUserDefinedCountBuffer(10));


            aEClock
                .FlowIntoSensor(aESensor1, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoSPB(averageSPB1, SPBChannelNum.CH0, LinkTypeEnum.Copy);

            aEClock
               .FlowIntoSensor(aESensor2, AEClock_PrescalerEnum.PRESCALER1)
               .FlowIntoSPB(averageSPB2, SPBChannelNum.CH0, LinkTypeEnum.Copy);

            aEClock
               .FlowIntoSensor(aESensor3, AEClock_PrescalerEnum.PRESCALER1)
               .FlowIntoSPB(averageSPB3, SPBChannelNum.CH0, LinkTypeEnum.Copy);
        }




        [AEEXETest]
        public void testFilters()
        {
            

            AEClock aEClock = new AEClock("clock1", 100 );

            AESensor aESensor1 = new AESensor("sensor1", SensorResolution.Resolution16Bit, SensorDataType.uint16_T);
            AESensor aESensor2 = new AESensor("sensor2", SensorResolution.Resolution16Bit, SensorDataType.uint16_T);
            AESensor aESensor3 = new AESensor("sensor3", SensorResolution.Resolution16Bit, SensorDataType.uint16_T);
            

            ThreeDimensionalVector velocitySPB = new ThreeDimensionalVector("velocitySPB", StyleOfSPB.EachSPBTask, false);
            ThreeDimensionalVector accelerationSPB = new ThreeDimensionalVector("accelerationSPB", StyleOfSPB.EachSPBTask, false);


            var filterderv1_1 = aEClock
                .FlowIntoSensor(aESensor1, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new DerivativeFilter());
            var filterderv1_2 = aEClock
                .FlowIntoSensor(aESensor2, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new DerivativeFilter());
            var filterderv1_3 = aEClock
                .FlowIntoSensor(aESensor3, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new DerivativeFilter());

            filterderv1_1.FlowIntoSPB(velocitySPB, SPBChannelNum.CH0, LinkTypeEnum.Copy);
            filterderv1_2.FlowIntoSPB(velocitySPB, SPBChannelNum.CH1, LinkTypeEnum.Copy);
            filterderv1_3.FlowIntoSPB(velocitySPB, SPBChannelNum.CH2, LinkTypeEnum.Copy);

            filterderv1_1
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoSPB(accelerationSPB, SPBChannelNum.CH0, LinkTypeEnum.Copy);
             filterderv1_2
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoSPB(accelerationSPB, SPBChannelNum.CH1, LinkTypeEnum.Copy);
             filterderv1_3
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoSPB(accelerationSPB, SPBChannelNum.CH2, LinkTypeEnum.Copy);

             

        }



        [AEEXETest]
        public void testAELoop()
        {

            AELoopObjectTest aELoopObjectTest = new AELoopObjectTest("objectTest", AEPriorities.MediumPriority, 10);


        }




        [AEEXETest]
        public void testActionRequest()
        {
            UARTDriver uARTDriver = new UARTDriver("uartDriver", AEPriorities.MediumPriority);

            AELoopObjectTest2 aELoopObjectTest   = new AELoopObjectTest2("objectTest", AEPriorities.MediumPriority, 20);
        }


        [AEEXETest]
        public void testTDU()
        {
            AEClock aEClock = new AEClock("clockforTdu", 1000 );

            UARTDriverTDU uARTDriver = new UARTDriverTDU("uartDriverTDU", AEPriorities.MediumPriority);

            AELoopObjectTest3 aELoopObjectTest = new AELoopObjectTest3("objectTest1", AEPriorities.MediumPriority, 20);
            AELoopObjectTest4 aELoopObjectTest2 = new AELoopObjectTest4("objectTest2", AEPriorities.MediumPriority, 3);


            aEClock.FlowIntoTDU(uARTDriver, AEClock_PrescalerEnum.PRESCALER1);
        }




        [AEEXETest]
        public void testFSM()
        {
            AELoopObjectTest5 aELoopObjectTest = new AELoopObjectTest5("objectTest", AEPriorities.MediumPriority, 5);

            BlindsUITOPFSM blinduifsm = new BlindsUITOPFSM("blinduifsm", AEPriorities.MediumPriority);
            ConfiguringFSM configfsm = new ConfiguringFSM("configfsm", AEPriorities.MediumPriority);
            NormalOperationFSM normalfsm = new NormalOperationFSM("normalfsm ", AEPriorities.MediumPriority);
        }

        protected override string _GetDirectoryOfLibrary()
        {
            return @"C:\AERTOS\AERTOS\src\AE\AECoreTests"; 
        }

        protected override List<AEEvent> _GetEventsInLibrary()
        {
            return new List<AEEvent>() { 
                I2C_RXCpltEVT.Init(5),
                SomeOther.Init(10),
                  Button1.Init(10),
                Button2.Init(10),
                Button3.Init(10)
            };
        }

		protected override List<AEHal> _GetPeripheralsInLibrary()
        {
		//ADCPERIPHERAL1_CH1.Init(Portenum.PortB, PinEnum.PIN0)
            return new List<AEHal>() { 
            };
        }

        protected override List<AEProject> _GetLibrariesIDependOn()
        {
            return new List<AEProject>() { };
        }
		
		protected override List<string> _GetAnyAdditionalIncludeDirs()
        {
            return new List<string>() { };
        }

        protected override List<string> _GetAnyAdditionalSRCDirs()
        {
            return new List<string>() { };
        }

    }
	
	
	
}