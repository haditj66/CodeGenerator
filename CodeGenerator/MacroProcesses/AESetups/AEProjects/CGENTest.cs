//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

//Macro2 - AERTOS\AEProjectCS.cgenMM::TopLevel


using CgenMin.MacroProcesses;
using CodeGenerator.MacroProcesses.AESetups.SPBs;
using System.Collections.Generic;

namespace CGENTestProject
{
    public class DerivativeFilter : AEFilter
    {
        public DerivativeFilter()
            : base("CGENTest", "DerivativeFilter", 2, false)
        {

        }
    }



    public class CGENTest : AEProject
    {


        [AEEXETest()]
        public void defaultTest()
        {

            AEClock aEClock = new AEClock("clock1", 1000, "clock1_callback");
            AESensor sensor1 = new AESensor("sensor1", SensorResolution.Resolution12Bit, 0, 100);
            AESensor sensor2 = new AESensor("sensor2", SensorResolution.Resolution12Bit);
            AESensor sensor3 = new AESensor("sensor3", SensorResolution.Resolution12Bit);
            AverageSPB averageSPB1 = new AverageSPB("averageSPB1", " ", false, new SPBChannelUserDefinedCountBuffer(10));
            AverageSPB averageSPB2 = new AverageSPB("averageSPB2", " ", false, new SPBChannelUserDefinedCountBuffer(10));
            AverageSPB averageSPB3 = new AverageSPB("averageSPB3", " ", false, new SPBChannelUserDefinedCountBuffer(10));

            AdderSPB adderSPB = new AdderSPB("adderSPB", false, 3, new SPBChannelUserDefinedCountBuffer(10));

            UARTDriver uts = new UARTDriver("uartDriver", 10, AEPriorities.MediumPriority);
            UARTDriverTDU utstduu = new UARTDriverTDU("uartDriverTDU", 10, AEPriorities.MediumPriority);

            aEClock.FlowIntoTDU(utstduu, AEClock_PrescalerEnum.PRESCALER1);


            aEClock
                .FlowIntoSensor(sensor1, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoSPB(averageSPB1, 0, LinkTypeEnum.Copy);

            aEClock
                .FlowIntoSensor(sensor2, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoSPB(averageSPB2, 0, LinkTypeEnum.Copy);
            aEClock
                .FlowIntoSensor(sensor3, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoFilter(new DerivativeFilter())
                .FlowIntoSPB(averageSPB3, 0, LinkTypeEnum.Copy);


            averageSPB1
             .FlowIntoFilter(new DerivativeFilter())
             .FlowIntoSPB(adderSPB, 0, LinkTypeEnum.Copy);

            averageSPB2
             .FlowIntoFilter(new DerivativeFilter())
             .FlowIntoSPB(adderSPB, 1, LinkTypeEnum.Copy);

            averageSPB3
             .FlowIntoFilter(new DerivativeFilter())
             .FlowIntoSPB(adderSPB, 2, LinkTypeEnum.Copy);


            //var rr = averageSPB1.GenerateAEConfigSection();
        }



        protected override List<AEEvent> _GetEventsInLibrary()
        {
            return new List<AEEvent>() {
                new I2C_RXCpltEVT(10)
            };
        }

        protected override List<AEProject> _GetLibrariesIDependOn()
        {
            return new List<AEProject>()
            {
                //new CGENTest2()
            };
        }

        protected override string _GetDirectoryOfLibrary()
        {
            return @"C:/CodeGenerator/CodeGenerator/macro2Test/CGENTest";
        }
    }

}