//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################



using CgenMin.MacroProcesses;
using commonAOsProject;
using commonHalAOsProject;
using System.Collections.Generic;

namespace mpu6050driverProject
{





    public class mpuLoopAcquisition : AELoopObject
    {
        public mpuLoopAcquisition(  string instanceNameOfloopObject, AEPriorities priority, int frequencyOfLoop , II2C I2cPeripheralToUse) 
            : base("mpu6050driver", instanceNameOfloopObject, priority, frequencyOfLoop, 
                  new CppFunctionArgs(new CppFunctionArg("AEI2C*", "I2cPeripheralToUse",false, I2cPeripheralToUse.InstName))
                  )
        {
        }
    }


    public class mpu6050Setup
    {
        public mpuLoopAcquisition loopobjectForGettingMPUData;
        public AEClockTicksNotFromRtosTimer clockFormpudata;

        public AESensor sensorForAccelx;
        public AESensor sensorForAccely;
        public AESensor sensorForAccelz;
        public AESensor sensorForgyrox;
        public AESensor sensorForgyroy;
        public AESensor sensorForgyroz;
        public AESensor sensorForMagx;
        public AESensor sensorForMagy;
        public AESensor sensorForMagz;

        public mpu6050Setup(II2C i2CForMpu, AEPriorities priorityOfMpuDataReading, int frequencyOfmpuDataSampling)
        {
            clockFormpudata = new AEClockTicksNotFromRtosTimer("clockForMpu", frequencyOfmpuDataSampling);

             loopobjectForGettingMPUData = new mpuLoopAcquisition( "loopobjectForGettingMPUData", priorityOfMpuDataReading, frequencyOfmpuDataSampling, i2CForMpu);

            sensorForAccelx = new AESensor("sensorForAccelx", SensorResolution.Resolution16Bit, SensorDataType.int16_T);
            sensorForAccely = new AESensor("sensorForAccely", SensorResolution.Resolution16Bit, SensorDataType.int16_T);
            sensorForAccelz = new AESensor("sensorForAccelz", SensorResolution.Resolution16Bit, SensorDataType.int16_T);

            sensorForgyrox = new AESensor("sensorForgyrox", SensorResolution.Resolution16Bit, SensorDataType.int16_T);
            sensorForgyroy = new AESensor("sensorForgyroy", SensorResolution.Resolution16Bit, SensorDataType.int16_T);
            sensorForgyroz = new AESensor("sensorForgyroz", SensorResolution.Resolution16Bit, SensorDataType.int16_T);


            float accelUnitConversion = (float)(9.8 / (8192 )  );
            clockFormpudata.FlowIntoSensor(sensorForAccelx, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new GainFilter(-accelUnitConversion)); 
            clockFormpudata.FlowIntoSensor(sensorForAccely, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new GainFilter(-accelUnitConversion)); 
            clockFormpudata.FlowIntoSensor(sensorForAccelz, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new GainFilter(accelUnitConversion));//this is not negative. Not sure why but whatever. probably has something to do with mpu

            const double PI = 3.1415926535897931;
            float gyroUnitConversion = (float) ((1 / (float)32.8f) * ((float)180 /PI ))  ;

            clockFormpudata.FlowIntoSensor(sensorForgyrox, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new GainFilter(-gyroUnitConversion));
            clockFormpudata.FlowIntoSensor(sensorForgyroy, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new GainFilter(-gyroUnitConversion));
            clockFormpudata.FlowIntoSensor(sensorForgyroz, AEClock_PrescalerEnum.PRESCALER1)
                .FlowIntoFilter(new GainFilter(gyroUnitConversion));//this is not negative. Not sure why but whatever. probably has something to do with mpu
        }

        
    }


    public class mpu6050driver : AEProject
    {




		[AEEXETest]
        public void defaultTest()
        {
            mpu6050Setup mpu6050Setup = new mpu6050Setup(I2CPERIPHERAL1.Instance, AEPriorities.HighPriority,500);
        }

        protected override string _GetDirectoryOfLibrary()
        {
            return @"mpu6050driver"; 
        }

        protected override List<AEEvent> _GetEventsInLibrary()
        {
            return new List<AEEvent>() { };
        }

		protected override List<AEHal> _GetPeripheralsInLibrary()
        {
		//ADCPERIPHERAL1_CH1.Init(Portenum.PortB, PinEnum.PIN0)
            return new List<AEHal>() { 
                I2CPERIPHERAL1.Init(40000, Portenum.PortB, PinEnum.PIN6,Portenum.PortB, PinEnum.PIN7)
            };
        }

        protected override List<AEProject> _GetLibrariesIDependOn()
        {
            return new List<AEProject>() {new commonAOs()};
        }
		
		protected override List<string> _GetAnyAdditionalIncludeDirs()
        {
            return new List<string>() { };
        }
		
		protected override List<string> _GetAnyAdditionalSRCDirs()
        {
            return new List<string>() {  };
        }
		
 
    }
	
	
	
}