##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/AERTOSProjects/commonHalAOs\include\PWMDriverU.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


#pragma once

#include "AEUtilityAsService.h" 

#include "AEPublishSubscribeManager.h" 

#include "ActionRequestObjectArgTDU.h"
 
#include "AE_TDUAsService.h" 

#include "PWMDriverU_ServiceGen.h"


#include "GPIOsNeededForMotor.h"


##UserCode_header

class PWMDriverU :   
	 public AEService< 10 , AENullActionRequest, AENullActionRequest, AENullActionRequest, ActionRequestObjectArgTDU1<AENull , AENull, 10, PWMDriverU>, AENullActionRequest, AENullActionRequest >
{
public: 

	##UserCode_public
	 
	PWMDriverU ()
	{ 
		 //ActionReq1.ServiceName = "Transmit";
		
		
		ActionReq4.ServiceName = "StartPWMFromSPBLinked";
		
		 
		 
		PWMDriverU_CTOR
		
		##UserCode_ctor
		 	
	}
	PWMDriverU_Service
	
	
	protected: AEPWM* pwmThisUses; 
public: AEPWM*  GetpwmThisUses()   const {return pwmThisUses; }


public: void UserInitialize(AEPWM* _pwmThisUses )
	{
		pwmThisUses =  _pwmThisUses;

		
		##UserCode_userInited
		
		userInitialized = true;
	}
private: bool userInitialized = false;
protected: void CheckIfConfiguredProperly() const override  
	{
		//PWMDriverU::CheckIfConfiguredProperly();
		if (userInitialized == false)
		{
			// you did not initialize one of your AEobjects
			AEAssertRuntime(userInitialized == true, "user did not call the UserInitailize function for  PWMDriverU"); 
		} 
		 
	}
	
protected: 
	
	##UserCode_prot
	
	
	//example for waiting on an event
	//actReq->WaitForEvent<SomeOther_Sig>(
	//				[](void* s, AEEventDiscriminator_t* evt)->void {
	//					//SomeOther_Sig* sssc = (SomeOther_Sig*)evt->evt;
	//					AEPrint("Event SomeOther_Sig recieved"); 
	//					return;
	//				}
	//				, 500);
	
	//dont forget to return the service value when finished
	//actReq->SetReturnArg(1); 
	
	//return true in the update function for tdus when the service is done.
	
	//=====================================
	//Normal services
	//=====================================
	  
	  
	  
	
	
	//=====================================
	//TDU services
	//=====================================
	void _StartPWMFromSPBLinked(AENull placeholder) 
   {

         ##UserCode_StartPWMFromSPBLinked 
   }

void _StartPWMFromSPBLinkedCancelCleanup() 
   {

         ##UserCode_StartPWMFromSPBLinkedcancel 
   }

    bool _StartPWMFromSPBLinkedUpdate(ActionRequestObjectArgTDU1<AENull , AENull, 10, PWMDriverU>* request, AENull placeholder) 
   {

         ##UserCode_StartPWMFromSPBLinkedu 
    return true; 
    }
  
	  
	  
	 
	  

};




##UserCode_func