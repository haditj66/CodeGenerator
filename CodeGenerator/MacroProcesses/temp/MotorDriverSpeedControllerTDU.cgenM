##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/Users/hadi/Documents/AERTOSProjects/MotorDriverEncoder\include\MotorDriverSpeedControllerTDU.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


#pragma once

#include "AEUtilityAsService.h" 

#include "AEPublishSubscribeManager.h" 

#include "ActionRequestObjectArgTDU.h"
 
#include "AE_TDUAsService.h" 

#include "MotorDriverSpeedControllerTDU_ServiceGen.h"




##UserCode_header

class MotorDriverSpeedControllerTDU :   
	 public AEService< 10 , AENullActionRequest, AENullActionRequest, AENullActionRequest, ActionRequestObjectArgTDU3<int16_t , float , bool , bool, 10, MotorDriverSpeedControllerTDU>, ActionRequestObjectArgTDU2<float , bool , bool, 10, MotorDriverSpeedControllerTDU>, AENullActionRequest >
{
public: 

	##UserCode_public
	 
	MotorDriverSpeedControllerTDU ()
	{ 
		 //ActionReq1.ServiceName = "Transmit";
		
		
		ActionReq4.ServiceName = "MoveToAngularPositionWithSpeed";
		ActionReq5.ServiceName = "MoveAtSpeed";
		 
		 
		MotorDriverSpeedControllerTDU_CTOR
		
		##UserCode_ctor
		 	
	}
	MotorDriverSpeedControllerTDU_Service
	
	
	protected: AEPWM* pwmPeripheral; 
public: AEPWM*  GetpwmPeripheral()   const {return pwmPeripheral; }

protected: AEGPIOOutput* gpiotoChangeDirections; 
public: AEGPIOOutput*  GetgpiotoChangeDirections()   const {return gpiotoChangeDirections; }

protected: int32_t DesiredPosition; 
public: int32_t  GetDesiredPosition()   const {return DesiredPosition; }
public:  void SetDesiredPosition(int32_t  _DesiredPosition){DesiredPosition = _DesiredPosition; }

protected: float MaxDeltaPWMPerSec; 
public: float  GetMaxDeltaPWMPerSec()   const {return MaxDeltaPWMPerSec; }


public: void UserInitialize(AEPWM* _pwmPeripheral , AEGPIOOutput* _gpiotoChangeDirections , int32_t _DesiredPosition , float _MaxDeltaPWMPerSec  = 20)
	{
		pwmPeripheral =  _pwmPeripheral;
gpiotoChangeDirections =  _gpiotoChangeDirections;
DesiredPosition =  _DesiredPosition;
MaxDeltaPWMPerSec =  _MaxDeltaPWMPerSec;

		
		##UserCode_userInited
		
		userInitialized = true;
	}
private: bool userInitialized = false;
protected: void CheckIfConfiguredProperly() const override  
	{
		//MotorDriverSpeedControllerTDU::CheckIfConfiguredProperly();
		if (userInitialized == false)
		{
			// you did not initialize one of your AEobjects
			AEAssertRuntime(userInitialized == true, "user did not call the UserInitailize function for  MotorDriverSpeedControllerTDU"); 
		} 
		 
	}
	
protected: 
	
	##UserCode_prot
	
	
	//example for waiting on an event
	//actReq->WaitForEvent<SomeOther_Sig>(
	//				[](void* s, AEEventDiscriminator_t* evt)->void {
	//					//SomeOther_Sig* sssc = (SomeOther_Sig*)evt->evt;
	//					AEPrint("Event SomeOther_Sig recieved"); 
	//					return;
	//				}
	//				, 500);
	
	//dont forget to return the service value when finished
	//actReq->SetReturnArg(1); 
	
	//return true in the update function for tdus when the service is done.
	
	//=====================================
	//Normal services
	//=====================================
	  
	  
	  
	
	
	//=====================================
	//TDU services
	//=====================================
	void _MoveToAngularPositionWithSpeed(int16_t StepCountToTurnTo, float speedToTurnAt, bool withRamping) 
   {

         ##UserCode_MoveToAngularPositionWithSpeed 
   }

void _MoveToAngularPositionWithSpeedCancelCleanup() 
   {

         ##UserCode_MoveToAngularPositionWithSpeedcancel 
   }

    bool _MoveToAngularPositionWithSpeedUpdate(ActionRequestObjectArgTDU3<int16_t , float , bool , bool, 10, MotorDriverSpeedControllerTDU>* request, int16_t StepCountToTurnTo, float speedToTurnAt, bool withRamping) 
   {

         ##UserCode_MoveToAngularPositionWithSpeedu 
    return true; 
    }
  
	void _MoveAtSpeed(float speedToTurnAt, bool withRamping) 
   {

         ##UserCode_MoveAtSpeed 
   }

void _MoveAtSpeedCancelCleanup() 
   {

         ##UserCode_MoveAtSpeedcancel 
   }

    bool _MoveAtSpeedUpdate(ActionRequestObjectArgTDU2<float , bool , bool, 10, MotorDriverSpeedControllerTDU>* request, float speedToTurnAt, bool withRamping) 
   {

         ##UserCode_MoveAtSpeedu 
    return true; 
    }
  
	  
	 
	  

};




##UserCode_func