##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/AERTOS/AERTOS/src/AE/AECoreTests\testFilters.cpp 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


 
#if INTEGRATION_TESTS_FOR_AECoreTests__testFilters
 
#include "IntegTestPipeline.h"


#include "AECore.h"
#include "AE_Init.h" 
#include "AEClock.h" 
#include "AEObjects.h" 

DECLARE_ALL_AO_PTR

static void clock1_callback(TimerHandle_t xTimerHandle);
static uint32_t sensor1_data[1];
static uint32_t sensor2_data[1];
static uint32_t sensor3_data[1];




##UserCode_a

void RunSelectedIntegrationTest_testFilters()
{

AE_Init();
 ##UserCode_beforemain

static AEClock<AEObservorSensor, AEObservorInterpretorBaseDUMMY, 3, 0, 0, 0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0> clock1L(100, clock1_callback);
clock1 = &clock1L;

static AEObservorSensorFilterOut< 2, Filter<DerivativeFilter, 2>,Filter<DerivativeFilter, 2> ,1  > sensor1L((uint32_t*) sensor1_data, SensorResolution::Resolution16Bit  );
sensor1 = &sensor1L;

static AEObservorSensorFilterOut< 2, Filter<DerivativeFilter, 2>,Filter<DerivativeFilter, 2> ,1  > sensor2L((uint32_t*) sensor2_data, SensorResolution::Resolution16Bit  );
sensor2 = &sensor2L;

static AEObservorSensorFilterOut< 2, Filter<DerivativeFilter, 2>,Filter<DerivativeFilter, 2> ,1  > sensor3L((uint32_t*) sensor3_data, SensorResolution::Resolution16Bit  );
sensor3 = &sensor3L;

static ThreeDimensionalVector< false> velocitySPBL; velocitySPBL.InitSPBObserver(StyleOfSPB::EachSPBTask); 
velocitySPB = &velocitySPBL;

static ThreeDimensionalVector< false> accelerationSPBL; accelerationSPBL.InitSPBObserver(StyleOfSPB::EachSPBTask); 
accelerationSPB = &accelerationSPBL;









##UserCode_beforelinks
static float velocitySPBchBuffer1[1];
velocitySPB->AddSignalFlowLinkToChannelWithCopy1(sensor1, velocitySPBchBuffer1, 1);
static float velocitySPBchBuffer2[1];
velocitySPB->AddSignalFlowLinkToChannelWithCopy2(sensor2, velocitySPBchBuffer2, 1);
static float velocitySPBchBuffer3[1];
velocitySPB->AddSignalFlowLinkToChannelWithCopy3(sensor3, velocitySPBchBuffer3, 1);
static float accelerationSPBchBuffer1[1];
accelerationSPB->AddSignalFlowLinkToChannelWithCopy1(sensor1, accelerationSPBchBuffer1, 2);
static float accelerationSPBchBuffer2[1];
accelerationSPB->AddSignalFlowLinkToChannelWithCopy2(sensor2, accelerationSPBchBuffer2, 2);
static float accelerationSPBchBuffer3[1];
accelerationSPB->AddSignalFlowLinkToChannelWithCopy3(sensor3, accelerationSPBchBuffer3, 2);


##UserCode_beforeclock
clock1->SetObservorToClock(sensor1, AEClock_PrescalerEnum::PRESCALER1);
clock1->SetObservorToClock(sensor2, AEClock_PrescalerEnum::PRESCALER1);
clock1->SetObservorToClock(sensor3, AEClock_PrescalerEnum::PRESCALER1);


//AEITEST_END_TestsAfterTimer_AECoreTests(5000);
##UserCode_b

AEAO::ConfigureAndStart();
}


##UserCode_c


static void clock1_callback(TimerHandle_t xTimerHandle) {  
  ##UserCode_clock1before 
  
 clock1->Tick(); 
  ##UserCode_clock1after 
}


#endif