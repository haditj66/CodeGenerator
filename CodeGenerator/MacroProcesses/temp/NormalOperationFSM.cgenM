##Macro1 
 ##LoopIncrement1 
 ##ToFile C:\CodeGenerator\CodeGenerator\macro2Test\CGENTest\include\NormalOperationFSM.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once
 
#include "AEClock.h"

#include "AESimpleFSM.h"
 
#include "AEEventBase.h" 

 

##UserCode_header
 

class NormalOperationFSM : public AESimpleFSM<NormalOperationFSM>
{
public:
	NormalOperationFSM() 
	{
	##UserCode_ctor
	};

	##UserCode_public

	static AETransitionType Idle(TypeOfThisFSM* const thisFSM, AEEventDiscriminator_t const * const evt);
static AETransitionType MovingToPoint(TypeOfThisFSM* const thisFSM, AEEventDiscriminator_t const * const evt);
 


	// Inherited via AESimpleFSM
	StateFuncPtr InitialState() override;
	
protected:

	##UserCode_prot

};


##UserCode_func
 



//state: Idle ======================================================
inline AETransitionType NormalOperationFSM::Idle(TypeOfThisFSM * const thisFSM, AEEventDiscriminator_t const * const evt)
{
	AETransitionType transitionType = UNHANDLED;

	##UserCode_Idlea
	
	
	auto evtId = evt->GetEvtID();
	switch (evtId)
	{
	case Enter_Sig:
	{
         thisFSM->Subscribe<Button1>();
         thisFSM->Subscribe<Button2>();
         thisFSM->Subscribe<Button3>();
 
		
	##UserCode_Idleenter
		 
		 
		break;
	}
	case Exit_Sig:
	{
          thisFSM->UnSubscribe<Button1>();
          thisFSM->UnSubscribe<Button2>();
          thisFSM->UnSubscribe<Button3>();
 
		
	##UserCode_Idleexit
		
		break;
	}
	

// Button1 ------------------------------------------------------------
    case Button1:
     {
    ##UserCode_IdleButton1
        break;
     }


// Button2 ------------------------------------------------------------
    case Button2:
     {
    ##UserCode_IdleButton2
        break;
     }


// Button3 ------------------------------------------------------------
    case Button3:
     {
    ##UserCode_IdleButton3
        TRANSITION_TOSTATE(&MovingToPoint)
        break;
     }

 
	
	default:
		break;
	}

	return transitionType;
}


//state: MovingToPoint ======================================================
inline AETransitionType NormalOperationFSM::MovingToPoint(TypeOfThisFSM * const thisFSM, AEEventDiscriminator_t const * const evt)
{
	AETransitionType transitionType = UNHANDLED;

	##UserCode_MovingToPointa
	
	
	auto evtId = evt->GetEvtID();
	switch (evtId)
	{
	case Enter_Sig:
	{
         thisFSM->Subscribe<Button1>();
         thisFSM->Subscribe<Button2>();
         thisFSM->Subscribe<Button3>();
 
		
	##UserCode_MovingToPointenter
		 
		 
		break;
	}
	case Exit_Sig:
	{
          thisFSM->UnSubscribe<Button1>();
          thisFSM->UnSubscribe<Button2>();
          thisFSM->UnSubscribe<Button3>();
 
		
	##UserCode_MovingToPointexit
		
		break;
	}
	

// Button1 ------------------------------------------------------------
    case Button1:
     {
    ##UserCode_MovingToPointButton1
        break;
     }


// Button2 ------------------------------------------------------------
    case Button2:
     {
    ##UserCode_MovingToPointButton2
        break;
     }


// Button3 ------------------------------------------------------------
    case Button3:
     {
    ##UserCode_MovingToPointButton3
        TRANSITION_TOSTATE(&Idle)
        break;
     }

 
	
	default:
		break;
	}

	return transitionType;
} 


inline NormalOperationFSM::StateFuncPtr NormalOperationFSM::InitialState()
{
	return CastToStateFuncPtr(&Idle);
}
