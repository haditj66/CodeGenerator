##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/Users/hadi/Documents/AERTOSProjects/commonAOs\include\PID_WithDesiredInputAsChannel_SPB.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once


#include "AESPBObservorOutputType.h"
#include "AEUtils.h"
#include "FreeRTOS.h"
#include "AEFilter.h"

#include "AEIntegrationTesting.h"

##UserCode_header

template<bool isSubscribable, TEMPLATESPB_Filters>
	class PID_WithDesiredInputAsChannel_SPB :
		public AESPBObservorOutputType <1, 2, isSubscribable,
TEMPLATESPB_FilterParams,
1, false,
1, false>
	{
	public:
		PID_WithDesiredInputAsChannel_SPB();
		
		##UserCode_public


	protected: uint8_t kpfrom0to100; 
public: uint8_t  Getkpfrom0to100()   const {return kpfrom0to100; }

protected: uint8_t kifrom0to100; 
public: uint8_t  Getkifrom0to100()   const {return kifrom0to100; }

protected: uint8_t kdfrom0to100; 
public: uint8_t  Getkdfrom0to100()   const {return kdfrom0to100; }

protected: float maxPossibleError; 
public: float  GetmaxPossibleError()   const {return maxPossibleError; }

protected: float maxpossibleRateOfChangeOfControlVariable; 
public: float  GetmaxpossibleRateOfChangeOfControlVariable()   const {return maxpossibleRateOfChangeOfControlVariable; }

protected: float mapOutputTOMin; 
public: float  GetmapOutputTOMin()   const {return mapOutputTOMin; }

protected: float mapOutputTOMax; 
public: float  GetmapOutputTOMax()   const {return mapOutputTOMax; }

protected: float offsetFromZero; 
public: float  GetoffsetFromZero()   const {return offsetFromZero; }


public: void UserInitialize(uint8_t _kpfrom0to100 , uint8_t _kifrom0to100 , uint8_t _kdfrom0to100 , float _maxPossibleError , float _maxpossibleRateOfChangeOfControlVariable , float _mapOutputTOMin  = -100000, float _mapOutputTOMax  = 100000, float _offsetFromZero  = 0)
	{
		kpfrom0to100 =  _kpfrom0to100;
kifrom0to100 =  _kifrom0to100;
kdfrom0to100 =  _kdfrom0to100;
maxPossibleError =  _maxPossibleError;
maxpossibleRateOfChangeOfControlVariable =  _maxpossibleRateOfChangeOfControlVariable;
mapOutputTOMin =  _mapOutputTOMin;
mapOutputTOMax =  _mapOutputTOMax;
offsetFromZero =  _offsetFromZero;

		
		##UserCode_userInited
		
		userInitialized = true;
	}
private: bool userInitialized = false;
protected: void CheckIfConfiguredProperly() const override  
	{
		//PID_WithDesiredInputAsChannel_SPB::CheckIfConfiguredProperly();
		if (userInitialized == false)
		{
			// you did not initialize one of your AEobjects
			AEAssertRuntime(userInitialized == true, "user did not call the UserInitailize function for  PID_WithDesiredInputAsChannel_SPB"); 
		} 
		 
	}
	
	private:
	##UserCode_private

		void RefreshOVERRIDE(float OutputSignal[1]) override;

	};


##UserCode_func


template<bool isSubscribable, TEMPLATESPB_FiltersFunctionParams>
	inline PID_WithDesiredInputAsChannel_SPB< isSubscribable, TEMPLATESPB_FilterParams>::PID_WithDesiredInputAsChannel_SPB()
	{
		##UserCode_ctor
	}

template<bool isSubscribable, TEMPLATESPB_FiltersFunctionParams>
	inline void PID_WithDesiredInputAsChannel_SPB< isSubscribable, TEMPLATESPB_FilterParams>::RefreshOVERRIDE(float OutputSignal[1])
	{

		float* ch1 = this->InputChannels[0]->ChannelSignalBufferSingle; 
float* ch2 = this->InputChannels[1]->ChannelSignalBufferSingle; 

 
		##UserCode_refresh
	}

