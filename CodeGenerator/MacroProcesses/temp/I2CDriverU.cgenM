##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/Users/hadi/Documents/AERTOSProjects/commonHalAOs\include\I2CDriverU.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


#pragma once

#include "AEUtilityAsService.h" 

#include "AEPublishSubscribeManager.h" 

#include "ActionRequestObjectArgTDU.h"
 
#include "AE_TDUAsService.h" 

#include "I2CDriverU_ServiceGen.h"


#include "GPIOsNeededForMotor.h"


##UserCode_header

class I2CDriverU :   
	 public AEService< 10 , AENullActionRequest, AENullActionRequest, AENullActionRequest, ActionRequestObjectArgTDU4<uint8_t , uint8_t , uint8_t , uint8_t* , bool, 10, I2CDriverU>, ActionRequestObjectArgTDU4<uint8_t , uint8_t , uint8_t , uint8_t* , bool, 10, I2CDriverU>, AENullActionRequest >
{
public: 

	##UserCode_public
	 
	I2CDriverU ()
	{ 
		 //ActionReq1.ServiceName = "Transmit";
		
		
		ActionReq4.ServiceName = "WriteBytes";
		ActionReq5.ServiceName = "ReadBytes";
		 
		 
		I2CDriverU_CTOR
		
		##UserCode_ctor
		 	
	}
	I2CDriverU_Service
	
	
	protected: AEI2C* i2cThisUses; 
public: AEI2C*  Geti2cThisUses()   const {return i2cThisUses; }


public: void UserInitialize(AEI2C* _i2cThisUses )
	{
		i2cThisUses =  _i2cThisUses;

		
		##UserCode_userInited
		
		userInitialized = true;
	}
private: bool userInitialized = false;
protected: void CheckIfConfiguredProperly() const override  
	{
		//I2CDriverU::CheckIfConfiguredProperly();
		if (userInitialized == false)
		{
			// you did not initialize one of your AEobjects
			AEAssertRuntime(userInitialized == true, "user did not call the UserInitailize function for  I2CDriverU"); 
		} 
		 
	}
	
protected: 
	
	##UserCode_prot
	
	
	//example for waiting on an event
	//actReq->WaitForEvent<SomeOther_Sig>(
	//				[](void* s, AEEventDiscriminator_t* evt)->void {
	//					//SomeOther_Sig* sssc = (SomeOther_Sig*)evt->evt;
	//					AEPrint("Event SomeOther_Sig recieved"); 
	//					return;
	//				}
	//				, 500);
	
	//dont forget to return the service value when finished
	//actReq->SetReturnArg(1); 
	
	//return true in the update function for tdus when the service is done.
	
	//=====================================
	//Normal services
	//=====================================
	  
	  
	  
	
	
	//=====================================
	//TDU services
	//=====================================
	void _WriteBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* dataToWrite) 
   {

         ##UserCode_WriteBytes 
   }

void _WriteBytesCancelCleanup() 
   {

         ##UserCode_WriteBytescancel 
   }

    bool _WriteBytesUpdate(ActionRequestObjectArgTDU4<uint8_t , uint8_t , uint8_t , uint8_t* , bool, 10, I2CDriverU>* request, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* dataToWrite) 
   {

         ##UserCode_WriteBytesu 
    return true; 
    }
  
	void _ReadBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pdataToWriteTo) 
   {

         ##UserCode_ReadBytes 
   }

void _ReadBytesCancelCleanup() 
   {

         ##UserCode_ReadBytescancel 
   }

    bool _ReadBytesUpdate(ActionRequestObjectArgTDU4<uint8_t , uint8_t , uint8_t , uint8_t* , bool, 10, I2CDriverU>* request, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pdataToWriteTo) 
   {

         ##UserCode_ReadBytesu 
    return true; 
    }
  
	  
	 
	  

};




##UserCode_func