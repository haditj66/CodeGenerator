##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/AERTOSProjects/commonAOs\include\GainFilter.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once 

#include <cstdint>
#include "AEFilter.h"


##UserCode_header

template<class _gain >
class GainFilter //: public Filter<GainFilter< _gain >, 1>
{
  template<class TFilterDerived, uint16_t PastDataBufferSize>
	friend class Filter;

public:

float G_gain; 


##UserCode_publ

	GainFilter();

protected:

##UserCode_prot
	
	void InitializeImpl(float samplingPeriodOfObservorInSeconds);

	const float*  PastDataCircularBuffer;
	float SamplingPeriodOfObservorInSeconds;
	uint16_t PastDataBufferSize;

private:
	float RunFilter(float newestInput);
	
	##UserCode_priv
	

};

template<class _gain >
inline GainFilter< _gain >::GainFilter()
{
	_gain T_gain; 
 G_gain =  T_gain.GetValue(); 

	##UserCode_ctor
}
 
template<class _gain >
inline void GainFilter< _gain >::InitializeImpl(float samplingPeriodOfObservorInSeconds)
{
	##UserCode_init
}

template<class _gain >
inline float GainFilter< _gain >::RunFilter(float newestInput)
{
//PastDataCircularBuffer[0] is the newest input
//example: float der = (PastDataCircularBuffer[0] - PastDataCircularBuffer[1]) / this->SamplingPeriodOfObservorInSeconds;
//return the output of the filter
//return der;

##UserCode_impl
 
}


##UserCode_func