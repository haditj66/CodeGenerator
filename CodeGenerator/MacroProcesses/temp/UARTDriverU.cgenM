##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/AERTOSProjects/commonHalAOs\include\UARTDriverU.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


#pragma once

#include "AEUtilityAsService.h" 

#include "AEPublishSubscribeManager.h" 

#include "ActionRequestObjectArgTDU.h"
 
#include "AE_TDUAsService.h" 

#include "UARTDriverU_ServiceGen.h"


#include "GPIOsNeededForMotor.h"


##UserCode_header

class UARTDriverU :   
	 public AEService< 10 , ActionRequestObjectArg2<const char* , uint32_t , AENull, 10, UARTDriverU>, AENullActionRequest, AENullActionRequest, AENullActionRequest, AENullActionRequest, AENullActionRequest >
{
public: 

	##UserCode_public
	 
	UARTDriverU ()
	{ 
		ActionReq1.ServiceName = "TransmitMsg"; //ActionReq1.ServiceName = "Transmit";
		
		
		
		
		 
		 
		UARTDriverU_CTOR
		
		##UserCode_ctor
		 	
	}
	UARTDriverU_Service
	
	
	protected: AEUART* uartThisUses; 
public: AEUART*  GetuartThisUses()   const {return uartThisUses; }


public: void UserInitialize(AEUART* _uartThisUses )
	{
		uartThisUses =  _uartThisUses;

		
		##UserCode_userInited
		
		userInitialized = true;
	}
private: bool userInitialized = false;
protected: void CheckIfConfiguredProperly() const override  
	{
		//UARTDriverU::CheckIfConfiguredProperly();
		if (userInitialized == false)
		{
			// you did not initialize one of your AEobjects
			AEAssertRuntime(userInitialized == true, "user did not call the UserInitailize function for  UARTDriverU"); 
		} 
		 
	}
	
protected: 
	
	##UserCode_prot
	
	
	//example for waiting on an event
	//actReq->WaitForEvent<SomeOther_Sig>(
	//				[](void* s, AEEventDiscriminator_t* evt)->void {
	//					//SomeOther_Sig* sssc = (SomeOther_Sig*)evt->evt;
	//					AEPrint("Event SomeOther_Sig recieved"); 
	//					return;
	//				}
	//				, 500);
	
	//dont forget to return the service value when finished
	//actReq->SetReturnArg(1); 
	
	//return true in the update function for tdus when the service is done.
	
	//=====================================
	//Normal services
	//=====================================
	void _TransmitMsg(const char* msg, uint32_t lengthOfMsg) 
   {

         ##UserCode_TransmitMsg 
   }
  
	  
	  
	
	
	//=====================================
	//TDU services
	//=====================================
	  
	  
	  
	 
	  

};




##UserCode_func