##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/Users/hadi/Documents/AERTOSProjects/commonEigenAOs\include\PoseEulerAngles_SPB.h 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once


#include "AESPBObservorOutputType.h"
#include "AEUtils.h"
#include "FreeRTOS.h"
#include "AEFilter.h"

#include "AEIntegrationTesting.h"

##UserCode_header

template<bool isSubscribable, TEMPLATESPB_Filters>
	class PoseEulerAngles_SPB :
		public AESPBObservorOutputType <3, 9, isSubscribable,
TEMPLATESPB_FilterParams,
1, false,
1, false,
1, false,
1, false,
1, false,
1, false,
1, false,
1, false,
1, false>
	{
	public:
		PoseEulerAngles_SPB();
		
		##UserCode_public


	protected: ComplFilter* compFilt; 
public: ComplFilter*  GetcompFilt()   const {return compFilt; }


public: void UserInitialize(ComplFilter* _compFilt )
	{
		compFilt =  _compFilt;

		
		##UserCode_userInited
		
		userInitialized = true;
	}
private: bool userInitialized = false;
protected: void CheckIfConfiguredProperly() const override  
	{
		//PoseEulerAngles_SPB::CheckIfConfiguredProperly();
		if (userInitialized == false)
		{
			// you did not initialize one of your AEobjects
			AEAssertRuntime(userInitialized == true, "user did not call the UserInitailize function for  PoseEulerAngles_SPB"); 
		} 
		 
	}
	
	private:
	##UserCode_private

		void RefreshOVERRIDE(float OutputSignal[3]) override;

	};


##UserCode_func


template<bool isSubscribable, TEMPLATESPB_FiltersFunctionParams>
	inline PoseEulerAngles_SPB< isSubscribable, TEMPLATESPB_FilterParams>::PoseEulerAngles_SPB()
	{
		##UserCode_ctor
	}

template<bool isSubscribable, TEMPLATESPB_FiltersFunctionParams>
	inline void PoseEulerAngles_SPB< isSubscribable, TEMPLATESPB_FilterParams>::RefreshOVERRIDE(float OutputSignal[3])
	{

		float* ch1 = this->InputChannels[0]->ChannelSignalBufferSingle; 
float* ch2 = this->InputChannels[1]->ChannelSignalBufferSingle; 
float* ch3 = this->InputChannels[2]->ChannelSignalBufferSingle; 
float* ch4 = this->InputChannels[3]->ChannelSignalBufferSingle; 
float* ch5 = this->InputChannels[4]->ChannelSignalBufferSingle; 
float* ch6 = this->InputChannels[5]->ChannelSignalBufferSingle; 
float* ch7 = this->InputChannels[6]->ChannelSignalBufferSingle; 
float* ch8 = this->InputChannels[7]->ChannelSignalBufferSingle; 
float* ch9 = this->InputChannels[8]->ChannelSignalBufferSingle; 

 
		##UserCode_refresh
	}

