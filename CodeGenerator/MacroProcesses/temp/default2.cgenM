##Macro1 
 ##LoopIncrement1 
 ##ToFile C:/CodeGenerator/CodeGenerator/macro2Test/CGENTest2\default2.cpp 
//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


 
#if INTEGRATION_TESTS_FOR_CGENTest2__default2
 
#include "IntegTestPipeline.h"


#include "AECore.h"
#include "AE_Init.h" 
#include "AEClock.h" 
#include "AEObjects.h" 

DECLARE_ALL_AO_PTR

static void clock1_callback(TimerHandle_t xTimerHandle);
static uint32_t sensor1_data[1];
static uint32_t sensor2_data[1];
static uint32_t sensor3_data[1];




##UserCode_a

void RunSelectedIntegrationTest_default2()
{

AE_Init();
 ##UserCode_beforemain

static AEClock<AEObservorSensor, AEObservorInterpretorBaseDUMMY, 3, 0, 0, 0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0,0, 0, 0> clock1L(1000, clock1_callback);
clock1 = &clock1L;

static AEObservorSensorFilterOut< 2, Filter<DerivativeFilter, 2>,Filter<DerivativeFilter, 2> ,1  > sensor1L((uint32_t*) sensor1_data, SensorResolution::Resolution12Bit , 0 , 100);
sensor1 = &sensor1L;

static AEObservorSensorFilterOut< 2, Filter<DerivativeFilter, 2>,Filter<DerivativeFilter, 2> ,1  > sensor2L((uint32_t*) sensor2_data, SensorResolution::Resolution12Bit , 0 , 100);
sensor2 = &sensor2L;

static AEObservorSensorFilterOut< 2, Filter<DerivativeFilter, 2>,Filter<DerivativeFilter, 2> ,1  > sensor3L((uint32_t*) sensor3_data, SensorResolution::Resolution12Bit  );
sensor3 = &sensor3L;

static AverageSPB< false,  10> averageSPB1L; averageSPB1L.InitSPBObserver(StyleOfSPB::EachSPBTask); 
averageSPB1 = &averageSPB1L;









##UserCode_beforelinks
static float averageSPB1chBuffer1[10];
averageSPB1->AddSignalFlowLinkToChannelWithCopy1(sensor1, averageSPB1chBuffer1, 2);


##UserCode_beforeclock
clock1->SetObservorToClock(sensor1, AEClock_PrescalerEnum::PRESCALER1);
clock1->SetObservorToClock(sensor2, AEClock_PrescalerEnum::PRESCALER1);
clock1->SetObservorToClock(sensor3, AEClock_PrescalerEnum::PRESCALER1);


//AEITEST_END_TestsAfterTimer_CGENTest2(5000);
##UserCode_b

AEAO::ConfigureAndStart();
}


##UserCode_c


static void clock1_callback(TimerHandle_t xTimerHandle) {  
  ##UserCode_clock1before 
  
 clock1->Tick(); 
  ##UserCode_clock1after 
}


#endif