#pragma once 

#include <cstdint>
#include "AEFilter.h"


##UserCode_header

@Template@
class @FilterName@ : public Filter<@FilterName@, @PastBufferSize@>
{
  //template<class TFilterDerived, uint16_t PastDataBufferSize>
	friend class Filter;

public:

##UserCode_publ

	@FilterName@();

protected:

##UserCode_prot
	
	void InitializeImpl(float samplingPeriodOfObservorInSeconds);

private:
	float RunFilter(float newestInput);
	
	##UserCode_priv
	

};

@Template@
inline @FilterName@@TemplateArgs@::@FilterName@()
{
	##UserCode_ctor
}
 
@Template@
inline void @FilterName@@TemplateArgs@::InitializeImpl(float samplingPeriodOfObservorInSeconds)
{
	##UserCode_init
}

@Template@
inline float @FilterName@@TemplateArgs@::RunFilter(float newestInput)
{
//PastDataCircularBuffer[0] is the newest input
//example: float der = (PastDataCircularBuffer[0] - PastDataCircularBuffer[1]) / this->SamplingPeriodOfObservorInSeconds;
//return the output of the filter
//return der;

##UserCode_impl
 
}


##UserCode_func